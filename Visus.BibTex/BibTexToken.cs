// <copyright file="BibTexToken.cs" company="Visualisierungsinstitut der Universität Stuttgart">
// Copyright © 2024 Visualisierungsinstitut der Universität Stuttgart.
// Licensed under the MIT licence. See LICENCE file for details.
// </copyright>
// <author>Christoph Müller</author>


namespace Visus.BibTex {

    /// <summary>
    /// Represents a token generated by <see cref="BibTexLexer"/>, which is
    /// the combination of input and its semantic.
    /// </summary>
    /// <param name="type">The semantic of the token.</param>
    /// <param name="character">The character that has been read.</param>
    internal struct BibTexToken(BibTexTokenType type, char character) {

        #region Public properties
        /// <summary>
        /// Gets the character that was read.
        /// </summary>
        public char Character { get; } = character;

        /// <summary>
        /// Gets the type of the token.
        /// </summary>
        public BibTexTokenType Type { get; } = type;
        #endregion

        #region Public methods
        /// <summary>
        /// Answer whether <see cref="Type"/> is <paramref name="type" />.
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public bool Is(BibTexTokenType type) => (this.Type == type);

        /// <summary>
        /// Answer whether the token is any of the specified types.
        /// </summary>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public bool IsAnyOf(params BibTexTokenType[] tokens) {
            if (tokens == null) {
                return false;
            }

            foreach (var t in tokens) {
                if (this.Type == t) {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Answer whether the token is a white space, possibly including the
        /// new line token as white space, too.
        /// </summary>
        /// <param name="includeNewLine"></param>
        /// <returns></returns>
        public bool IsWhiteSpace(bool includeNewLine) {
            return (this.Type == BibTexTokenType.WhiteSpace)
                || (includeNewLine && (this.Type == BibTexTokenType.NewLine));
        }
        #endregion

        #region Public deconstructors
        /// <summary>
        /// Deconstruct the object into a tuple.
        /// </summary>
        /// <param name="type"></param>
        /// <param name="character"></param>
        public void Deconstruct(out BibTexTokenType type, out char character) {
            character = this.Character;
            type = this.Type;
        }
        #endregion
    }
}
