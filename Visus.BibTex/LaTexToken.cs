// <copyright file="LaTexToken.cs" company="Visualisierungsinstitut der Universität Stuttgart">
// Copyright © 2024 Visualisierungsinstitut der Universität Stuttgart.
// Licensed under the MIT licence. See LICENCE file for details.
// </copyright>
// <author>Christoph Müller</author>

using System;
using System.Diagnostics;


namespace Visus.BibTex {

    /// <summary>
    /// Represents a token generated by the <see cref="LaTexTokeniser"/>.
    /// </summary>
    /// <param name="type">The type of the token.</param>
    /// <param name="text">The content of the token.</param>
    [DebuggerDisplay("{Type}: {Text}")]
    internal ref struct LaTexToken(LaTexTokenType type, ReadOnlySpan<char> text) {

        #region Public constructors
        /// <summary>
        /// Initialises a new instance with an <see cref="NameTokenType.End" />
        /// token.
        /// </summary>
        public LaTexToken() : this(LaTexTokenType.End, new()) { }
        #endregion

        #region Public properties
        /// <summary>
        /// Gets whether the token contains no text.
        /// </summary>
        public bool IsEmpty => (this.Text.Length < 1);

        /// <summary>
        /// Gets the content of the token.
        /// </summary>
        public ReadOnlySpan<char> Text { get; } = text;

        /// <summary>
        /// Gets the type of the token.
        /// </summary>
        public LaTexTokenType Type { get; } = type;
        #endregion

        #region Public methods
        /// <summary>
        /// Answer whether the <see cref="Type"/> of the token is
        /// <paramref name="type"/>.
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public bool Is(LaTexTokenType type) => (this.Type == type);

        /// <summary>
        /// Answer whether the <see cref="Type"/> of the token is any of
        /// <paramref name="types"/>.
        /// </summary>
        /// <param name="types"></param>
        /// <returns></returns>
        public bool Is(params LaTexTokenType[] types) {
            if (types != null) {
                foreach (var t in types) {
                    if (this.Is(t)) {
                        return true;
                    }
                }
            }

            return false;
        }

        /// <inheritdoc />
        public override string ToString() => this.Text.ToString();
        #endregion
    }
}
